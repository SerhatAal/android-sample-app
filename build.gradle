buildscript {
    repositories {
        jcenter()
        google()
    }

    dependencies {
        apply from: 'config/dependencies.gradle'
        apply from: 'config/dependencies.gradle', to: it
        apply from: "$rootDir/config/git-hooks.gradle.kts"
        classpath "com.android.tools.build:gradle:$it.gradle.gradle"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$it.compiler.kotlin"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$it.version.navigation"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$it.version.spotless"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$version.detekt"
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        maven { url "https://jitpack.io" }
    }

    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore.properties')
        def configName = 'release'

        if (project.hasProperty("android") && android.signingConfigs.hasProperty(configName)) {
            try {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                android.signingConfigs[configName].storeFile = file(props['RELEASE.STORE_FILE'])
                android.signingConfigs[configName].storePassword = props['RELEASE.STORE_PASSWORD']
                android.signingConfigs[configName].keyAlias = props['RELEASE.KEY_ALIAS']
                android.signingConfigs[configName].keyPassword = props['RELEASE.KEY_PASSWORD']
            } catch (ignored) {
                throw new InvalidUserDataException(
                        "You should define\n" +
                                "'RELEASE.STORE_FILE', \n" +
                                "'RELEASE.STORE_PASSWORD', \n" +
                                "'RELEASE.KEY_ALIAS\n" +
                                "'and " +
                                "'RELEASE.KEY_PASSWORD'" +
                                " in keystore.properties. *Rename and update keystore.properties.sample if exists.")
            }
        }
    }
}

def buildAliases = [
        'reformat': ['ktlintFormat', 'spotlessApply'],
]
def expandedTaskList = []

gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}

gradle.startParameter.taskNames = expandedTaskList.flatten()
